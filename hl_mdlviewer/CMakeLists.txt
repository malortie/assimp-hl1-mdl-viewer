cmake_minimum_required(VERSION 3.0)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Static library

project (hl_mdlviewer_lib VERSION "0.0.0")

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})

if (HLMDLVIEWER_USE_NANOGUI)
    set(HLMVIEWER_NANOGUI_ENABLED true)
endif()

set(CONFIG_FILE "config.h")
set(CONFIG_FILE_DIR "${PROJECT_BINARY_DIR}/include")
set(CONFIG_FILE_PATH "${CONFIG_FILE_DIR}/${CONFIG_FILE}")

configure_file("${PROJECT_SOURCE_DIR}/cmake/config.h.in" ${CONFIG_FILE_PATH} @ONLY)

get_filename_component(HLMDLVIEWER_SOURCE_DIR "src" REALPATH BASE_DIR "${PROJECT_SOURCE_DIR}")

set(HLMDLVIEWER_LIB_SHADERS_SOURCE_DIR "${PROJECT_SOURCE_DIR}/shaders")
set(HLMDLVIEWER_LIB_SHADERS_BINARY_DIR "${PROJECT_BINARY_DIR}/shaders")

set(HLMDLVIEWER_LIB_SOURCES_PRIVATE_DIR "${HLMDLVIEWER_SOURCE_DIR}/private")
set(HLMDLVIEWER_LIB_SOURCES_DIR "${HLMDLVIEWER_SOURCE_DIR}/lib")
set(HLMDLVIEWER_LIB_HL1_SOURCES_DIR "${HLMDLVIEWER_LIB_SOURCES_DIR}/hl1")

set(HLMDLVIEWER_GLAD_FILE "${HLMDLVIEWER_LIB_SOURCES_DIR}/glad.c")

set(PRECOMPILED_HEADER_FILES
    "${HLMDLVIEWER_LIB_SOURCES_PRIVATE_DIR}/pch.cpp"
    "${HLMDLVIEWER_LIB_SOURCES_PRIVATE_DIR}/pch.h")

file(GLOB HLMDLVIEWER_LIB_SOURCES
    "${HLMDLVIEWER_LIB_SOURCES_DIR}/*.h"
    "${HLMDLVIEWER_LIB_SOURCES_DIR}/*.hpp"
    "${HLMDLVIEWER_LIB_SOURCES_DIR}/*.c"
    "${HLMDLVIEWER_LIB_SOURCES_DIR}/*.cpp")

file(GLOB_RECURSE HLMDLVIEWER_LIB_HL1_SOURCES
    "${HLMDLVIEWER_LIB_HL1_SOURCES_DIR}/*.h"
    "${HLMDLVIEWER_LIB_HL1_SOURCES_DIR}/*.hpp"
    "${HLMDLVIEWER_LIB_HL1_SOURCES_DIR}/*.c"
    "${HLMDLVIEWER_LIB_HL1_SOURCES_DIR}/*.cpp")

list(APPEND HLMDLVIEWER_LIB_SOURCES ${HLMDLVIEWER_LIB_HL1_SOURCES})

if (${HLMDLVIEWER_USE_NANOGUI})
    set(HLMDLVIEWER_LIB_NANOGUI_SOURCES_DIR "${HLMDLVIEWER_LIB_SOURCES_DIR}/nanogui")

    file(GLOB_RECURSE HLMDLVIEWER_LIB_NANOGUI_SOURCES
        "${HLMDLVIEWER_LIB_NANOGUI_SOURCES_DIR}/*.h"
        "${HLMDLVIEWER_LIB_NANOGUI_SOURCES_DIR}/*.hpp"
        "${HLMDLVIEWER_LIB_NANOGUI_SOURCES_DIR}/*.c"
        "${HLMDLVIEWER_LIB_NANOGUI_SOURCES_DIR}/*.cpp")

    list(APPEND HLMDLVIEWER_LIB_SOURCES ${HLMDLVIEWER_LIB_NANOGUI_SOURCES})
endif()

list(APPEND HLMDLVIEWER_LIB_SOURCES ${PRECOMPILED_HEADER_FILES})

source_group(TREE "${HLMDLVIEWER_SOURCE_DIR}" PREFIX "Source Files" FILES ${HLMDLVIEWER_LIB_SOURCES})

add_library(${PROJECT_NAME} STATIC ${HLMDLVIEWER_LIB_SOURCES})

list(FILTER HLMDLVIEWER_LIB_SOURCES EXCLUDE REGEX ${HLMDLVIEWER_GLAD_FILE})

set_source_files_properties(${HLMDLVIEWER_LIB_SOURCES} PROPERTIES COMPILE_FLAGS "/Yupch.h")
set_source_files_properties("${HLMDLVIEWER_LIB_SOURCES_PRIVATE_DIR}/pch.cpp" PROPERTIES COMPILE_FLAGS "/Ycpch.h")

set(HLMDLVIEWER_LIB_PUBLIC_INCLUDE_DIRS
    ${CONFIG_FILE_DIR}
    ${GLM_INCLUDE_DIRS}
    ${ASSIMP_INCLUDE_DIRS}
    ${HLMDLVIEWER_SOURCE_DIR}
    ${HLMDLVIEWER_LIB_SOURCES_DIR}
    "${HLMDLVIEWER_LIB_SOURCES_DIR}/hl1")

set(HLMDLVIEWER_LIB_PRIVATE_INCLUDE_DIRS ${HLMDLVIEWER_LIB_SOURCES_PRIVATE_DIR})

if (${HLMDLVIEWER_USE_NANOGUI})
    list(APPEND HLMDLVIEWER_LIB_PUBLIC_INCLUDE_DIRS
    ${NANOGUI_INCLUDE_DIRS}
    "${HLMDLVIEWER_LIB_SOURCES_DIR}/nanogui/"
    "${HLMDLVIEWER_LIB_SOURCES_DIR}/nanogui/hl1")
endif()

target_include_directories(
    ${PROJECT_NAME}
    PUBLIC
    ${HLMDLVIEWER_LIB_PUBLIC_INCLUDE_DIRS}
    PRIVATE
    ${HLMDLVIEWER_LIB_PRIVATE_INCLUDE_DIRS})

target_compile_definitions(
    ${PROJECT_NAME}
    PRIVATE
    HLMDLVIEWER_SHADERS_SEARCH_PATH=\"${HLMDLVIEWER_LIB_SHADERS_BINARY_DIR}\" 
    HLMDLVIEWER_GAME_SOUNDS_SEARCH_PATH=\"${HLMDLVIEWER_GAME_EXECUTABLE_DIR_CMAKE_PATH}/valve/sound\")

set(HLMDLVIEWER_BINARY_DIR ${PROJECT_BINARY_DIR})

macro(SET_TARGET_RUNTIME_OUTPUT_DIRECTORY target)
    set_target_properties(${target}
        PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY "${HLMDLVIEWER_BINARY_DIR}")
endmacro(SET_TARGET_RUNTIME_OUTPUT_DIRECTORY)

target_link_libraries(${PROJECT_NAME} assimp)
SET_TARGET_RUNTIME_OUTPUT_DIRECTORY(assimp)

if (${HLMDLVIEWER_USE_NANOGUI})
    target_link_libraries(${PROJECT_NAME} nanogui)
    SET_TARGET_RUNTIME_OUTPUT_DIRECTORY(nanogui)
endif()

if (WIN32)
    target_link_libraries(${PROJECT_NAME} winmm.lib)
endif()

macro(ADD_POSTBUILD_EVENT_COPY_DIRECTORY target sourcedir targetdir)
    add_custom_command(TARGET ${target} POST_BUILD
      COMMAND ${CMAKE_COMMAND} -E copy_directory "${sourcedir}" "${targetdir}"
      COMMENT "Copying shaders..."
      VERBATIM
    )
endmacro(ADD_POSTBUILD_EVENT_COPY_DIRECTORY)

ADD_POSTBUILD_EVENT_COPY_DIRECTORY(
${PROJECT_NAME} # target
${HLMDLVIEWER_LIB_SHADERS_SOURCE_DIR} # source directory
${HLMDLVIEWER_LIB_SHADERS_BINARY_DIR} # target directory
)

target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17)
set_target_properties(${PROJECT_NAME} PROPERTIES CXX_EXTENSIONS OFF)

# Executable

project (hl_mdlviewer)

file(GLOB HLMDLVIEWER_SOURCES
    "${HLMDLVIEWER_SOURCE_DIR}/*.h"
    "${HLMDLVIEWER_SOURCE_DIR}/*.hpp"
    "${HLMDLVIEWER_SOURCE_DIR}/*.c"
    "${HLMDLVIEWER_SOURCE_DIR}/*.cpp")

list(APPEND HLMDLVIEWER_SOURCES ${PRECOMPILED_HEADER_FILES})
set_source_files_properties(${HLMDLVIEWER_SOURCES} PROPERTIES COMPILE_FLAGS "/Yupch.h")
set_source_files_properties("${HLMDLVIEWER_LIB_SOURCES_PRIVATE_DIR}/pch.cpp" PROPERTIES COMPILE_FLAGS "/Ycpch.h")

source_group(TREE "${HLMDLVIEWER_SOURCE_DIR}" PREFIX "Source Files" FILES ${HLMDLVIEWER_SOURCES})

add_executable(${PROJECT_NAME} ${HLMDLVIEWER_SOURCES})

target_include_directories(
${PROJECT_NAME}
PUBLIC
${HLMDLVIEWER_LIB_PUBLIC_INCLUDE_DIRS}
PRIVATE
${HLMDLVIEWER_LIB_PRIVATE_INCLUDE_DIRS}
)

target_link_libraries(${PROJECT_NAME} hl_mdlviewer_lib)

target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17)
set_target_properties(${PROJECT_NAME} PROPERTIES CXX_EXTENSIONS OFF)

add_subdirectory(tests)
